[automationcontroller]
autoctl1.ewl.example.com ansible_user={{ ansible_user }} ansible_password={{ ansible_password }} ansible_become_password={{ ansible_become_password }} ansible_become=True
autoctl2.ewl.example.com ansible_user={{ ansible_user }} ansible_password={{ ansible_password }} ansible_become_password={{ ansible_become_password }} ansible_become=True

[database]
autodb.ewl.example.com ansible_user={{ ansible_user }} ansible_password={{ ansible_password }} ansible_become_password={{ ansible_become_password }} ansible_become=True

[automationhub]
autohub.ewl.example.com ansible_user={{ ansible_user }} ansible_password={{ ansible_password }} ansible_become_password={{ ansible_become_password }} ansible_become=True

#[SSO]
#autosso.ewl.example.com ansible_user={{ ansible_user }} ansible_password={{ ansible_password }} ansible_become_password={{ ansible_become_password }} ansible_become=True

[all:vars]

# workaround to avoid enabling the codeready repo on the automation hub server
pulp_rhel_codeready_repo=[]

## CONTROLLER PARAMETERS ##

admin_password='{{ ansible_password }}'

# registry_username and registry_password must be set when
# registry_url is registry.redhat.io
# See https://access.redhat.com/RegistryAuthentication#registry-service-accounts-for-shared-environments-4
registry_username='{{ aap_setup_prep_registry_username }}'
registry_password='{{ aap_setup_prep_registry_password }}'
#registry_url={{ aap_setup_prep_registry_url }}

# If set, this will install a custom CA certificate to the system trust store.
#custom_ca_cert=/path/to/ca.crt
# Certificate and key to install in nginx for the web UI and API
#web_server_ssl_cert=/path/to/tower.cert
#web_server_ssl_key=/path/to/tower.key

## CONTROLLER DATABASE PARAMETERS ##

pg_password='{{ ansible_password }}'
pg_host='autodb.ewl.example.com'
pg_port='5432'
pg_database='awx'
pg_username='awx'
pg_sslmode='prefer'  # set to 'verify-full' for client-side enforced SSL

## AUTOMATION HUB PARAMETERS ##

automationhub_admin_password='{{ ansible_password }}'

# Dictionary of settings/configuration to pass to galaxy-importer.
# It will end up in /etc/galaxy-importer/galaxy-importer.cfg
#automationhub_importer_settings=

# Whether or not automation hub enforces the approval mechanism before
# collections are made available
#automationhub_require_content_approval=

# Whether or not automation hub should be deployed with TLS enabled
#automationhub_disable_https=

# Whether or not automation hub should be deployed with the HTTP Strict
# Transport Security (HSTS) web-security policy mechanism enabled
#automationhub_disable_hsts=

# Whether or not automation hub should validate certificate when requesting
# itself (default = False) because by default, Platform deploys with self-signed # certificates
#automationhub_ssl_validate_certs=

# Same as web_server_ssl_cert but for automation hub UI and API
#automationhub_ssl_cert=

# Same as web_server_ssl_key but for automation hub UI and API
#automationhub_ssl_key=

# automation hub provides artifacts in /var/lib/pulp. By default, this is set to
# true so automation controller automatically backs up the artifacts by default.
# If a partition (e.g., LVM, NFS, CephFS, etc.) was mounted there, an enterprise
# organization would ensure it is always backed up. If this is the case, you can
# set automationhub_backup_collections = false and the backup/restore process
# will not have to backup/restore /var/lib/pulp
#automationhub_backup_collections=

## AUTOMATION HUB DATABASE PARAMETERS ##

automationhub_pg_host='autodb.ewl.example.com'
automationhub_pg_port='5432'
automationhub_pg_database='automationhub'
automationhub_pg_username='automationhub'
automationhub_pg_password='{{ ansible_password }}'
automationhub_pg_sslmode='prefer'  # set to 'verify-full' for client-side enforced SSL

## AUTOMATION HUB SSO PARAMETERS ##

#sso_keystore_password='{{ ansible_password }}'

# If you are implementing Red Hat Single Sign-On on your automation hub
# environment, with a cluster setup, specify the main automation hub URL that
# clients will connect to, using the automationhub_main_url field.
# By default, the first node of the Automation Hub cluster is used.
#automationhub_main_url='https://automationhub.ansible.com'

## DATABASE SERVER PARAMETERS ##

# Server-side SSL settings for PostgreSQL (when we are installing it).
# postgres_use_ssl=False
# postgres_ssl_cert=/path/to/pgsql.crt
# postgres_ssl_key=/path/to/pgsql.key

## RH SSO PARAMETERS ##

#sso_console_admin_username='admin'
#sso_console_admin_password='{{ ansible_password }}'

## ISOLATED NOTES PARAMETERS ## OBSOLETE???

# Isolated Tower nodes automatically generate an RSA key for authentication;
# To disable this behavior, set this value to false
#isolated_key_generation=true
